/*


*/
select * from film_category;

-- 1. List the number of films per category.
select fc.category_id, count(*) as count
from film f
inner join film_category fc
	on f.film_id = fc.film_id
    group by fc.category_id;

-- 2. Retrieve the store ID, city, and country for each store.
select s.store_id, c.city, cy.country 
from store s
left join address a
	on s.address_id = a.address_id
left join city c
    on a.city_id = c.city_id
left join country cy
	on c.country_id = cy.country_id;
    
-- 3. Calculate the total revenue generated by each store in dollars.
select s.store_id, sum(p.amount) as total_revenue
	from store s
left join staff st
	on s.store_id = st.store_id
left join rental r
	on st.staff_id = r.staff_id
left join payment p
	on r.rental_id = p.rental_id
group by s.store_id;

-- 4. Determine the average running time of films for each category.
select fc.category_id, avg(length) as avg_running_time
from film f
inner join film_category fc
	on f.film_id = fc.film_id
    group by fc.category_id;


-- 5. Identify the film categories with the longest average running time.
select fc.category_id, avg(length)
from film f
inner join film_category fc
	on f.film_id = fc.film_id
    group by fc.category_id
    order by avg(length) desc
    limit 5;
    
-- 6. Display the top 10 most frequently rented movies in descending order.
select title, count(*) as count
from film f
left join inventory i
	on f.film_id = i.film_id
left join rental r
	on i.inventory_id = r.inventory_id
    group by title
    order by count desc
    limit 10;
    
-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.
/*
*/
select f.film_id, f.title like "Academy Dinosaur" as title_film,s.store_id like "1" as store_1, count(*) as count 
from film f
inner join inventory i
	on f.film_id = i.film_id
inner join store s
	on i.store_id = 1
    group by title like "Academy Dinosaur", s.store_id
    order by s.store_id;
    
/* 8. Provide a list of all distinct film titles, along with their availability status 
in the inventory. Include a column indicating whether each title is 'Available' or 'NOT available.' 
Note that there are 42 titles that are not in the inventory, and this information can be obtained using a 
CASE statement combined with IFNULL."

*/

select distinct titles, availa 
from film;

